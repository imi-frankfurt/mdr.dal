/*
 * This file is generated by jOOQ.
 */
package de.mig.mdr.dal.jooq.tables.records;


import de.mig.mdr.dal.jooq.tables.PermissibleCode;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.13.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PermissibleCodeRecord extends TableRecordImpl<PermissibleCodeRecord> implements Record2<Integer, Integer> {

    private static final long serialVersionUID = -935753222;

    /**
     * Setter for <code>public.permissible_code.code_scoped_identifier_id</code>.
     */
    public void setCodeScopedIdentifierId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.permissible_code.code_scoped_identifier_id</code>.
     */
    public Integer getCodeScopedIdentifierId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.permissible_code.catalog_value_domain_id</code>.
     */
    public void setCatalogValueDomainId(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.permissible_code.catalog_value_domain_id</code>.
     */
    public Integer getCatalogValueDomainId() {
        return (Integer) get(1);
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    @Override
    public Row2<Integer, Integer> valuesRow() {
        return (Row2) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return PermissibleCode.PERMISSIBLE_CODE.CODE_SCOPED_IDENTIFIER_ID;
    }

    @Override
    public Field<Integer> field2() {
        return PermissibleCode.PERMISSIBLE_CODE.CATALOG_VALUE_DOMAIN_ID;
    }

    @Override
    public Integer component1() {
        return getCodeScopedIdentifierId();
    }

    @Override
    public Integer component2() {
        return getCatalogValueDomainId();
    }

    @Override
    public Integer value1() {
        return getCodeScopedIdentifierId();
    }

    @Override
    public Integer value2() {
        return getCatalogValueDomainId();
    }

    @Override
    public PermissibleCodeRecord value1(Integer value) {
        setCodeScopedIdentifierId(value);
        return this;
    }

    @Override
    public PermissibleCodeRecord value2(Integer value) {
        setCatalogValueDomainId(value);
        return this;
    }

    @Override
    public PermissibleCodeRecord values(Integer value1, Integer value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PermissibleCodeRecord
     */
    public PermissibleCodeRecord() {
        super(PermissibleCode.PERMISSIBLE_CODE);
    }

    /**
     * Create a detached, initialised PermissibleCodeRecord
     */
    public PermissibleCodeRecord(Integer codeScopedIdentifierId, Integer catalogValueDomainId) {
        super(PermissibleCode.PERMISSIBLE_CODE);

        set(0, codeScopedIdentifierId);
        set(1, catalogValueDomainId);
    }
}
