/*
 * This file is generated by jOOQ.
 */
package de.mig.mdr.dal.jooq.tables;


import de.mig.mdr.dal.jooq.Indexes;
import de.mig.mdr.dal.jooq.Keys;
import de.mig.mdr.dal.jooq.Public;
import de.mig.mdr.dal.jooq.tables.records.DefinitionRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.13.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Definition extends TableImpl<DefinitionRecord> {

    private static final long serialVersionUID = 1299873517;

    /**
     * The reference instance of <code>public.definition</code>
     */
    public static final Definition DEFINITION = new Definition();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<DefinitionRecord> getRecordType() {
        return DefinitionRecord.class;
    }

    /**
     * The column <code>public.definition.id</code>.
     */
    public final TableField<DefinitionRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('definition_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.definition.scoped_identifier_id</code>.
     */
    public final TableField<DefinitionRecord, Integer> SCOPED_IDENTIFIER_ID = createField(DSL.name("scoped_identifier_id"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.definition.designation</code>.
     */
    public final TableField<DefinitionRecord, String> DESIGNATION = createField(DSL.name("designation"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.definition.definition</code>.
     */
    public final TableField<DefinitionRecord, String> DEFINITION_ = createField(DSL.name("definition"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.definition.language</code>.
     */
    public final TableField<DefinitionRecord, String> LANGUAGE = createField(DSL.name("language"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.definition.element_id</code>.
     */
    public final TableField<DefinitionRecord, Integer> ELEMENT_ID = createField(DSL.name("element_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>public.definition</code> table reference
     */
    public Definition() {
        this(DSL.name("definition"), null);
    }

    /**
     * Create an aliased <code>public.definition</code> table reference
     */
    public Definition(String alias) {
        this(DSL.name(alias), DEFINITION);
    }

    /**
     * Create an aliased <code>public.definition</code> table reference
     */
    public Definition(Name alias) {
        this(alias, DEFINITION);
    }

    private Definition(Name alias, Table<DefinitionRecord> aliased) {
        this(alias, aliased, null);
    }

    private Definition(Name alias, Table<DefinitionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Definition(Table<O> child, ForeignKey<O, DefinitionRecord> key) {
        super(child, key, DEFINITION);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.DEFINITION_ELEMENT_ID_IDX, Indexes.DEFINITION_SCOPED_IDENTIFIER_ID_IDX);
    }

    @Override
    public Identity<DefinitionRecord, Integer> getIdentity() {
        return Keys.IDENTITY_DEFINITION;
    }

    @Override
    public UniqueKey<DefinitionRecord> getPrimaryKey() {
        return Keys.DEFINITION_PKEY;
    }

    @Override
    public List<UniqueKey<DefinitionRecord>> getKeys() {
        return Arrays.<UniqueKey<DefinitionRecord>>asList(Keys.DEFINITION_PKEY);
    }

    @Override
    public List<ForeignKey<DefinitionRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<DefinitionRecord, ?>>asList(Keys.DEFINITION__DEFINITION_SCOPEDIDENTIFIER_ID_FKEY, Keys.DEFINITION__DEFINITION_ELEMENT_ID_FKEY);
    }

    public ScopedIdentifier scopedIdentifier() {
        return new ScopedIdentifier(this, Keys.DEFINITION__DEFINITION_SCOPEDIDENTIFIER_ID_FKEY);
    }

    public Element element() {
        return new Element(this, Keys.DEFINITION__DEFINITION_ELEMENT_ID_FKEY);
    }

    @Override
    public Definition as(String alias) {
        return new Definition(DSL.name(alias), this);
    }

    @Override
    public Definition as(Name alias) {
        return new Definition(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Definition rename(String name) {
        return new Definition(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Definition rename(Name name) {
        return new Definition(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, Integer, String, String, String, Integer> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
