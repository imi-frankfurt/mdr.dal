/*
 * This file is generated by jOOQ.
 */
package de.mig.mdr.dal.jooq.tables.records;


import de.mig.mdr.dal.jooq.tables.Hierarchy;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.TableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.13.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class HierarchyRecord extends TableRecordImpl<HierarchyRecord> implements Record3<Integer, Integer, Integer> {

    private static final long serialVersionUID = 1256299038;

    /**
     * Setter for <code>public.hierarchy.root</code>.
     */
    public void setRoot(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.hierarchy.root</code>.
     */
    public Integer getRoot() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.hierarchy.super</code>.
     */
    public void setSuper(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.hierarchy.super</code>.
     */
    public Integer getSuper() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>public.hierarchy.sub</code>.
     */
    public void setSub(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.hierarchy.sub</code>.
     */
    public Integer getSub() {
        return (Integer) get(2);
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Integer, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Integer, Integer, Integer> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Hierarchy.HIERARCHY.ROOT;
    }

    @Override
    public Field<Integer> field2() {
        return Hierarchy.HIERARCHY.SUPER;
    }

    @Override
    public Field<Integer> field3() {
        return Hierarchy.HIERARCHY.SUB;
    }

    @Override
    public Integer component1() {
        return getRoot();
    }

    @Override
    public Integer component2() {
        return getSuper();
    }

    @Override
    public Integer component3() {
        return getSub();
    }

    @Override
    public Integer value1() {
        return getRoot();
    }

    @Override
    public Integer value2() {
        return getSuper();
    }

    @Override
    public Integer value3() {
        return getSub();
    }

    @Override
    public HierarchyRecord value1(Integer value) {
        setRoot(value);
        return this;
    }

    @Override
    public HierarchyRecord value2(Integer value) {
        setSuper(value);
        return this;
    }

    @Override
    public HierarchyRecord value3(Integer value) {
        setSub(value);
        return this;
    }

    @Override
    public HierarchyRecord values(Integer value1, Integer value2, Integer value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached HierarchyRecord
     */
    public HierarchyRecord() {
        super(Hierarchy.HIERARCHY);
    }

    /**
     * Create a detached, initialised HierarchyRecord
     */
    public HierarchyRecord(Integer root, Integer super_, Integer sub) {
        super(Hierarchy.HIERARCHY);

        set(0, root);
        set(1, super_);
        set(2, sub);
    }
}
