/*
 * This file is generated by jOOQ.
 */
package de.mig.mdr.dal.jooq.tables;


import de.mig.mdr.dal.jooq.Keys;
import de.mig.mdr.dal.jooq.Public;
import de.mig.mdr.dal.jooq.tables.records.ImportRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.13.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Import extends TableImpl<ImportRecord> {

    private static final long serialVersionUID = -13471185;

    /**
     * The reference instance of <code>public.import</code>
     */
    public static final Import IMPORT = new Import();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ImportRecord> getRecordType() {
        return ImportRecord.class;
    }

    /**
     * The column <code>public.import.id</code>.
     */
    public final TableField<ImportRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('import_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.import.created_at</code>.
     */
    public final TableField<ImportRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * The column <code>public.import.created_by</code>.
     */
    public final TableField<ImportRecord, Integer> CREATED_BY = createField(DSL.name("created_by"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.import.namespace_id</code>.
     */
    public final TableField<ImportRecord, Integer> NAMESPACE_ID = createField(DSL.name("namespace_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.import.source</code>.
     */
    public final TableField<ImportRecord, String> SOURCE = createField(DSL.name("source"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.import.label</code>.
     */
    public final TableField<ImportRecord, String> LABEL = createField(DSL.name("label"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.import.uuid</code>.
     */
    public final TableField<ImportRecord, UUID> UUID = createField(DSL.name("uuid"), org.jooq.impl.SQLDataType.UUID, this, "");

    /**
     * The column <code>public.import.converted_at</code>.
     */
    public final TableField<ImportRecord, LocalDateTime> CONVERTED_AT = createField(DSL.name("converted_at"), org.jooq.impl.SQLDataType.LOCALDATETIME, this, "");

    /**
     * Create a <code>public.import</code> table reference
     */
    public Import() {
        this(DSL.name("import"), null);
    }

    /**
     * Create an aliased <code>public.import</code> table reference
     */
    public Import(String alias) {
        this(DSL.name(alias), IMPORT);
    }

    /**
     * Create an aliased <code>public.import</code> table reference
     */
    public Import(Name alias) {
        this(alias, IMPORT);
    }

    private Import(Name alias, Table<ImportRecord> aliased) {
        this(alias, aliased, null);
    }

    private Import(Name alias, Table<ImportRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Import(Table<O> child, ForeignKey<O, ImportRecord> key) {
        super(child, key, IMPORT);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<ImportRecord, Integer> getIdentity() {
        return Keys.IDENTITY_IMPORT;
    }

    @Override
    public UniqueKey<ImportRecord> getPrimaryKey() {
        return Keys.IMPORT_PKEY;
    }

    @Override
    public List<UniqueKey<ImportRecord>> getKeys() {
        return Arrays.<UniqueKey<ImportRecord>>asList(Keys.IMPORT_PKEY);
    }

    @Override
    public Import as(String alias) {
        return new Import(DSL.name(alias), this);
    }

    @Override
    public Import as(Name alias) {
        return new Import(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Import rename(String name) {
        return new Import(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Import rename(Name name) {
        return new Import(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, LocalDateTime, Integer, Integer, String, String, UUID, LocalDateTime> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
