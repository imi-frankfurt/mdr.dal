/*
 * This file is generated by jOOQ.
 */
package de.mig.mdr.dal.jooq.tables;


import de.mig.mdr.dal.jooq.Keys;
import de.mig.mdr.dal.jooq.Public;
import de.mig.mdr.dal.jooq.tables.records.MdrUserRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.13.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MdrUser extends TableImpl<MdrUserRecord> {

    private static final long serialVersionUID = -506494430;

    /**
     * The reference instance of <code>public.mdr_user</code>
     */
    public static final MdrUser MDR_USER = new MdrUser();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MdrUserRecord> getRecordType() {
        return MdrUserRecord.class;
    }

    /**
     * The column <code>public.mdr_user.id</code>.
     */
    public final TableField<MdrUserRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('mdr_user_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.mdr_user.auth_id</code>.
     */
    public final TableField<MdrUserRecord, String> AUTH_ID = createField(DSL.name("auth_id"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.mdr_user.first_name</code>.
     */
    public final TableField<MdrUserRecord, String> FIRST_NAME = createField(DSL.name("first_name"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.mdr_user.last_name</code>.
     */
    public final TableField<MdrUserRecord, String> LAST_NAME = createField(DSL.name("last_name"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.mdr_user.user_name</code>.
     */
    public final TableField<MdrUserRecord, String> USER_NAME = createField(DSL.name("user_name"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.mdr_user.email</code>.
     */
    public final TableField<MdrUserRecord, String> EMAIL = createField(DSL.name("email"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * Create a <code>public.mdr_user</code> table reference
     */
    public MdrUser() {
        this(DSL.name("mdr_user"), null);
    }

    /**
     * Create an aliased <code>public.mdr_user</code> table reference
     */
    public MdrUser(String alias) {
        this(DSL.name(alias), MDR_USER);
    }

    /**
     * Create an aliased <code>public.mdr_user</code> table reference
     */
    public MdrUser(Name alias) {
        this(alias, MDR_USER);
    }

    private MdrUser(Name alias, Table<MdrUserRecord> aliased) {
        this(alias, aliased, null);
    }

    private MdrUser(Name alias, Table<MdrUserRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> MdrUser(Table<O> child, ForeignKey<O, MdrUserRecord> key) {
        super(child, key, MDR_USER);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<MdrUserRecord, Integer> getIdentity() {
        return Keys.IDENTITY_MDR_USER;
    }

    @Override
    public UniqueKey<MdrUserRecord> getPrimaryKey() {
        return Keys.MDR_USER_PKEY;
    }

    @Override
    public List<UniqueKey<MdrUserRecord>> getKeys() {
        return Arrays.<UniqueKey<MdrUserRecord>>asList(Keys.MDR_USER_PKEY, Keys.MDR_USER_AUTH_ID_KEY);
    }

    @Override
    public MdrUser as(String alias) {
        return new MdrUser(DSL.name(alias), this);
    }

    @Override
    public MdrUser as(Name alias) {
        return new MdrUser(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MdrUser rename(String name) {
        return new MdrUser(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MdrUser rename(Name name) {
        return new MdrUser(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, String, String, String, String, String> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
