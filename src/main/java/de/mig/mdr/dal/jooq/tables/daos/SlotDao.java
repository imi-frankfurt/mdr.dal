/*
 * This file is generated by jOOQ.
 */
package de.mig.mdr.dal.jooq.tables.daos;


import de.mig.mdr.dal.jooq.tables.Slot;
import de.mig.mdr.dal.jooq.tables.records.SlotRecord;

import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.13.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SlotDao extends DAOImpl<SlotRecord, de.mig.mdr.dal.jooq.tables.pojos.Slot, Integer> {

    /**
     * Create a new SlotDao without any configuration
     */
    public SlotDao() {
        super(Slot.SLOT, de.mig.mdr.dal.jooq.tables.pojos.Slot.class);
    }

    /**
     * Create a new SlotDao with an attached configuration
     */
    public SlotDao(Configuration configuration) {
        super(Slot.SLOT, de.mig.mdr.dal.jooq.tables.pojos.Slot.class, configuration);
    }

    @Override
    public Integer getId(de.mig.mdr.dal.jooq.tables.pojos.Slot object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<de.mig.mdr.dal.jooq.tables.pojos.Slot> fetchRangeOfId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Slot.SLOT.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<de.mig.mdr.dal.jooq.tables.pojos.Slot> fetchById(Integer... values) {
        return fetch(Slot.SLOT.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public de.mig.mdr.dal.jooq.tables.pojos.Slot fetchOneById(Integer value) {
        return fetchOne(Slot.SLOT.ID, value);
    }

    /**
     * Fetch records that have <code>scoped_identifier_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<de.mig.mdr.dal.jooq.tables.pojos.Slot> fetchRangeOfScopedIdentifierId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Slot.SLOT.SCOPED_IDENTIFIER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>scoped_identifier_id IN (values)</code>
     */
    public List<de.mig.mdr.dal.jooq.tables.pojos.Slot> fetchByScopedIdentifierId(Integer... values) {
        return fetch(Slot.SLOT.SCOPED_IDENTIFIER_ID, values);
    }

    /**
     * Fetch records that have <code>key BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<de.mig.mdr.dal.jooq.tables.pojos.Slot> fetchRangeOfKey(String lowerInclusive, String upperInclusive) {
        return fetchRange(Slot.SLOT.KEY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>key IN (values)</code>
     */
    public List<de.mig.mdr.dal.jooq.tables.pojos.Slot> fetchByKey(String... values) {
        return fetch(Slot.SLOT.KEY, values);
    }

    /**
     * Fetch records that have <code>value BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<de.mig.mdr.dal.jooq.tables.pojos.Slot> fetchRangeOfValue(String lowerInclusive, String upperInclusive) {
        return fetchRange(Slot.SLOT.VALUE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>value IN (values)</code>
     */
    public List<de.mig.mdr.dal.jooq.tables.pojos.Slot> fetchByValue(String... values) {
        return fetch(Slot.SLOT.VALUE, values);
    }
}
