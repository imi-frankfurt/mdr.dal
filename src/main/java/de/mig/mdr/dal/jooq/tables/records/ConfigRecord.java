/*
 * This file is generated by jOOQ.
 */
package de.mig.mdr.dal.jooq.tables.records;


import de.mig.mdr.dal.jooq.tables.Config;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.JSON;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.13.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ConfigRecord extends UpdatableRecordImpl<ConfigRecord> implements Record3<Integer, String, JSON> {

    private static final long serialVersionUID = -1324842080;

    /**
     * Setter for <code>public.config.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>public.config.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.config.name</code>.
     */
    public void setName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>public.config.name</code>.
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>public.config.value</code>.
     */
    public void setValue(JSON value) {
        set(2, value);
    }

    /**
     * Getter for <code>public.config.value</code>.
     */
    public JSON getValue() {
        return (JSON) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, JSON> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Integer, String, JSON> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Config.CONFIG.ID;
    }

    @Override
    public Field<String> field2() {
        return Config.CONFIG.NAME;
    }

    @Override
    public Field<JSON> field3() {
        return Config.CONFIG.VALUE;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public JSON component3() {
        return getValue();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public JSON value3() {
        return getValue();
    }

    @Override
    public ConfigRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public ConfigRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public ConfigRecord value3(JSON value) {
        setValue(value);
        return this;
    }

    @Override
    public ConfigRecord values(Integer value1, String value2, JSON value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ConfigRecord
     */
    public ConfigRecord() {
        super(Config.CONFIG);
    }

    /**
     * Create a detached, initialised ConfigRecord
     */
    public ConfigRecord(Integer id, String name, JSON value) {
        super(Config.CONFIG);

        set(0, id);
        set(1, name);
        set(2, value);
    }
}
