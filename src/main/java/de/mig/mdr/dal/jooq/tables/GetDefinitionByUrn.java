/*
 * This file is generated by jOOQ.
 */
package de.mig.mdr.dal.jooq.tables;


import de.mig.mdr.dal.jooq.Keys;
import de.mig.mdr.dal.jooq.Public;
import de.mig.mdr.dal.jooq.tables.records.GetDefinitionByUrnRecord;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.13.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class GetDefinitionByUrn extends TableImpl<GetDefinitionByUrnRecord> {

    private static final long serialVersionUID = -123654446;

    /**
     * The reference instance of <code>public.get_definition_by_urn</code>
     */
    public static final GetDefinitionByUrn GET_DEFINITION_BY_URN = new GetDefinitionByUrn();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<GetDefinitionByUrnRecord> getRecordType() {
        return GetDefinitionByUrnRecord.class;
    }

    /**
     * The column <code>public.get_definition_by_urn.id</code>.
     */
    public final TableField<GetDefinitionByUrnRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('definition_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.get_definition_by_urn.scoped_identifier_id</code>.
     */
    public final TableField<GetDefinitionByUrnRecord, Integer> SCOPED_IDENTIFIER_ID = createField(DSL.name("scoped_identifier_id"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.get_definition_by_urn.designation</code>.
     */
    public final TableField<GetDefinitionByUrnRecord, String> DESIGNATION = createField(DSL.name("designation"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.get_definition_by_urn.definition</code>.
     */
    public final TableField<GetDefinitionByUrnRecord, String> DEFINITION = createField(DSL.name("definition"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.get_definition_by_urn.language</code>.
     */
    public final TableField<GetDefinitionByUrnRecord, String> LANGUAGE = createField(DSL.name("language"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.get_definition_by_urn.element_id</code>.
     */
    public final TableField<GetDefinitionByUrnRecord, Integer> ELEMENT_ID = createField(DSL.name("element_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>public.get_definition_by_urn</code> table reference
     */
    public GetDefinitionByUrn() {
        this(DSL.name("get_definition_by_urn"), null);
    }

    /**
     * Create an aliased <code>public.get_definition_by_urn</code> table reference
     */
    public GetDefinitionByUrn(String alias) {
        this(DSL.name(alias), GET_DEFINITION_BY_URN);
    }

    /**
     * Create an aliased <code>public.get_definition_by_urn</code> table reference
     */
    public GetDefinitionByUrn(Name alias) {
        this(alias, GET_DEFINITION_BY_URN);
    }

    private GetDefinitionByUrn(Name alias, Table<GetDefinitionByUrnRecord> aliased) {
        this(alias, aliased, new Field[1]);
    }

    private GetDefinitionByUrn(Name alias, Table<GetDefinitionByUrnRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.function());
    }

    public <O extends Record> GetDefinitionByUrn(Table<O> child, ForeignKey<O, GetDefinitionByUrnRecord> key) {
        super(child, key, GET_DEFINITION_BY_URN);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<GetDefinitionByUrnRecord, Integer> getIdentity() {
        return Keys.IDENTITY_GET_DEFINITION_BY_URN;
    }

    @Override
    public GetDefinitionByUrn as(String alias) {
        return new GetDefinitionByUrn(DSL.name(alias), this, parameters);
    }

    @Override
    public GetDefinitionByUrn as(Name alias) {
        return new GetDefinitionByUrn(alias, this, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public GetDefinitionByUrn rename(String name) {
        return new GetDefinitionByUrn(DSL.name(name), null, parameters);
    }

    /**
     * Rename this table
     */
    @Override
    public GetDefinitionByUrn rename(Name name) {
        return new GetDefinitionByUrn(name, null, parameters);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, Integer, String, String, String, Integer> fieldsRow() {
        return (Row6) super.fieldsRow();
    }

    /**
     * Call this table-valued function
     */
    public GetDefinitionByUrn call(String urn) {
        return new GetDefinitionByUrn(DSL.name(getName()), null, new Field[] { 
              DSL.val(urn, org.jooq.impl.SQLDataType.CLOB)
        });
    }

    /**
     * Call this table-valued function
     */
    public GetDefinitionByUrn call(Field<String> urn) {
        return new GetDefinitionByUrn(DSL.name(getName()), null, new Field[] { 
              urn
        });
    }
}
