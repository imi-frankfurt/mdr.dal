/*
 * This file is generated by jOOQ.
 */
package de.mig.mdr.dal.jooq.tables;


import de.mig.mdr.dal.jooq.Indexes;
import de.mig.mdr.dal.jooq.Keys;
import de.mig.mdr.dal.jooq.Public;
import de.mig.mdr.dal.jooq.enums.ElementType;
import de.mig.mdr.dal.jooq.enums.Status;
import de.mig.mdr.dal.jooq.tables.records.ScopedIdentifierRecord;

import java.util.Arrays;
import java.util.List;
import java.util.UUID;

import javax.annotation.processing.Generated;

import org.jooq.Check;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row10;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.13.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ScopedIdentifier extends TableImpl<ScopedIdentifierRecord> {

    private static final long serialVersionUID = 1100722463;

    /**
     * The reference instance of <code>public.scoped_identifier</code>
     */
    public static final ScopedIdentifier SCOPED_IDENTIFIER = new ScopedIdentifier();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ScopedIdentifierRecord> getRecordType() {
        return ScopedIdentifierRecord.class;
    }

    /**
     * The column <code>public.scoped_identifier.id</code>.
     */
    public final TableField<ScopedIdentifierRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('scoped_identifier_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.scoped_identifier.element_type</code>.
     */
    public final TableField<ScopedIdentifierRecord, ElementType> ELEMENT_TYPE = createField(DSL.name("element_type"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false).asEnumDataType(de.mig.mdr.dal.jooq.enums.ElementType.class), this, "");

    /**
     * The column <code>public.scoped_identifier.version</code>.
     */
    public final TableField<ScopedIdentifierRecord, Integer> VERSION = createField(DSL.name("version"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.scoped_identifier.identifier</code>.
     */
    public final TableField<ScopedIdentifierRecord, Integer> IDENTIFIER = createField(DSL.name("identifier"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.scoped_identifier.url</code>.
     */
    public final TableField<ScopedIdentifierRecord, String> URL = createField(DSL.name("url"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.scoped_identifier.created_by</code>.
     */
    public final TableField<ScopedIdentifierRecord, Integer> CREATED_BY = createField(DSL.name("created_by"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.scoped_identifier.status</code>.
     */
    public final TableField<ScopedIdentifierRecord, Status> STATUS = createField(DSL.name("status"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false).asEnumDataType(de.mig.mdr.dal.jooq.enums.Status.class), this, "");

    /**
     * The column <code>public.scoped_identifier.element_id</code>.
     */
    public final TableField<ScopedIdentifierRecord, Integer> ELEMENT_ID = createField(DSL.name("element_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.scoped_identifier.namespace_id</code>.
     */
    public final TableField<ScopedIdentifierRecord, Integer> NAMESPACE_ID = createField(DSL.name("namespace_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.scoped_identifier.uuid</code>.
     */
    public final TableField<ScopedIdentifierRecord, UUID> UUID = createField(DSL.name("uuid"), org.jooq.impl.SQLDataType.UUID.nullable(false), this, "");

    /**
     * Create a <code>public.scoped_identifier</code> table reference
     */
    public ScopedIdentifier() {
        this(DSL.name("scoped_identifier"), null);
    }

    /**
     * Create an aliased <code>public.scoped_identifier</code> table reference
     */
    public ScopedIdentifier(String alias) {
        this(DSL.name(alias), SCOPED_IDENTIFIER);
    }

    /**
     * Create an aliased <code>public.scoped_identifier</code> table reference
     */
    public ScopedIdentifier(Name alias) {
        this(alias, SCOPED_IDENTIFIER);
    }

    private ScopedIdentifier(Name alias, Table<ScopedIdentifierRecord> aliased) {
        this(alias, aliased, null);
    }

    private ScopedIdentifier(Name alias, Table<ScopedIdentifierRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> ScopedIdentifier(Table<O> child, ForeignKey<O, ScopedIdentifierRecord> key) {
        super(child, key, SCOPED_IDENTIFIER);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SCOPED_IDENTIFIER_CREATED_BY_IDX, Indexes.SCOPED_IDENTIFIER_ELEMENT_ID_IDX, Indexes.SCOPED_IDENTIFIER_IDENTIFIER_IDX, Indexes.SCOPED_IDENTIFIER_NAMESPACE_ID_IDX, Indexes.SCOPED_IDENTIFIER_STATUS_IDX, Indexes.SCOPED_IDENTIFIER_UUID_IDX, Indexes.SCOPED_IDENTIFIER_VERSION_IDX);
    }

    @Override
    public Identity<ScopedIdentifierRecord, Integer> getIdentity() {
        return Keys.IDENTITY_SCOPED_IDENTIFIER;
    }

    @Override
    public UniqueKey<ScopedIdentifierRecord> getPrimaryKey() {
        return Keys.SCOPED_IDENTIFIER_PKEY;
    }

    @Override
    public List<UniqueKey<ScopedIdentifierRecord>> getKeys() {
        return Arrays.<UniqueKey<ScopedIdentifierRecord>>asList(Keys.SCOPED_IDENTIFIER_PKEY, Keys.UNIQUE_ELEMENT_TYPE_IDENTIFIER);
    }

    @Override
    public List<ForeignKey<ScopedIdentifierRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ScopedIdentifierRecord, ?>>asList(Keys.SCOPED_IDENTIFIER__SCOPED_IDENTIFIER_CREATED_BY_FKEY, Keys.SCOPED_IDENTIFIER__SCOPED_IDENTIFIER_ELEMENT_ID_FKEY, Keys.SCOPED_IDENTIFIER__SCOPED_IDENTIFIER_NAMESPACE_ID2_FKEY);
    }

    public MdrUser mdrUser() {
        return new MdrUser(this, Keys.SCOPED_IDENTIFIER__SCOPED_IDENTIFIER_CREATED_BY_FKEY);
    }

    public Element scopedIdentifierElementIdFkey() {
        return new Element(this, Keys.SCOPED_IDENTIFIER__SCOPED_IDENTIFIER_ELEMENT_ID_FKEY);
    }

    public Element scopedIdentifierNamespaceId2Fkey() {
        return new Element(this, Keys.SCOPED_IDENTIFIER__SCOPED_IDENTIFIER_NAMESPACE_ID2_FKEY);
    }

    @Override
    public List<Check<ScopedIdentifierRecord>> getChecks() {
        return Arrays.<Check<ScopedIdentifierRecord>>asList(
              Internal.createCheck(this, DSL.name("et_check"), "((element_type = getelementtype(element_id)))", true)
        );
    }

    @Override
    public ScopedIdentifier as(String alias) {
        return new ScopedIdentifier(DSL.name(alias), this);
    }

    @Override
    public ScopedIdentifier as(Name alias) {
        return new ScopedIdentifier(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public ScopedIdentifier rename(String name) {
        return new ScopedIdentifier(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public ScopedIdentifier rename(Name name) {
        return new ScopedIdentifier(name, null);
    }

    // -------------------------------------------------------------------------
    // Row10 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row10<Integer, ElementType, Integer, Integer, String, Integer, Status, Integer, Integer, UUID> fieldsRow() {
        return (Row10) super.fieldsRow();
    }
}
