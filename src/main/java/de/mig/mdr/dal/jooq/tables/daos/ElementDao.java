/*
 * This file is generated by jOOQ.
 */
package de.mig.mdr.dal.jooq.tables.daos;


import de.mig.mdr.dal.jooq.enums.ElementType;
import de.mig.mdr.dal.jooq.enums.ValidationType;
import de.mig.mdr.dal.jooq.tables.Element;
import de.mig.mdr.dal.jooq.tables.records.ElementRecord;

import java.util.List;
import java.util.UUID;

import javax.annotation.processing.Generated;

import org.jooq.Configuration;
import org.jooq.JSON;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.13.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ElementDao extends DAOImpl<ElementRecord, de.mig.mdr.dal.jooq.tables.pojos.Element, Integer> {

    /**
     * Create a new ElementDao without any configuration
     */
    public ElementDao() {
        super(Element.ELEMENT, de.mig.mdr.dal.jooq.tables.pojos.Element.class);
    }

    /**
     * Create a new ElementDao with an attached configuration
     */
    public ElementDao(Configuration configuration) {
        super(Element.ELEMENT, de.mig.mdr.dal.jooq.tables.pojos.Element.class, configuration);
    }

    @Override
    public Integer getId(de.mig.mdr.dal.jooq.tables.pojos.Element object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<de.mig.mdr.dal.jooq.tables.pojos.Element> fetchRangeOfId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Element.ELEMENT.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<de.mig.mdr.dal.jooq.tables.pojos.Element> fetchById(Integer... values) {
        return fetch(Element.ELEMENT.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public de.mig.mdr.dal.jooq.tables.pojos.Element fetchOneById(Integer value) {
        return fetchOne(Element.ELEMENT.ID, value);
    }

    /**
     * Fetch records that have <code>element_type BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<de.mig.mdr.dal.jooq.tables.pojos.Element> fetchRangeOfElementType(ElementType lowerInclusive, ElementType upperInclusive) {
        return fetchRange(Element.ELEMENT.ELEMENT_TYPE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>element_type IN (values)</code>
     */
    public List<de.mig.mdr.dal.jooq.tables.pojos.Element> fetchByElementType(ElementType... values) {
        return fetch(Element.ELEMENT.ELEMENT_TYPE, values);
    }

    /**
     * Fetch records that have <code>hidden BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<de.mig.mdr.dal.jooq.tables.pojos.Element> fetchRangeOfHidden(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(Element.ELEMENT.HIDDEN, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>hidden IN (values)</code>
     */
    public List<de.mig.mdr.dal.jooq.tables.pojos.Element> fetchByHidden(Boolean... values) {
        return fetch(Element.ELEMENT.HIDDEN, values);
    }

    /**
     * Fetch records that have <code>created_by BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<de.mig.mdr.dal.jooq.tables.pojos.Element> fetchRangeOfCreatedBy(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Element.ELEMENT.CREATED_BY, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>created_by IN (values)</code>
     */
    public List<de.mig.mdr.dal.jooq.tables.pojos.Element> fetchByCreatedBy(Integer... values) {
        return fetch(Element.ELEMENT.CREATED_BY, values);
    }

    /**
     * Fetch records that have <code>element_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<de.mig.mdr.dal.jooq.tables.pojos.Element> fetchRangeOfElementId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Element.ELEMENT.ELEMENT_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>element_id IN (values)</code>
     */
    public List<de.mig.mdr.dal.jooq.tables.pojos.Element> fetchByElementId(Integer... values) {
        return fetch(Element.ELEMENT.ELEMENT_ID, values);
    }

    /**
     * Fetch records that have <code>scoped_identifier_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<de.mig.mdr.dal.jooq.tables.pojos.Element> fetchRangeOfScopedIdentifierId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Element.ELEMENT.SCOPED_IDENTIFIER_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>scoped_identifier_id IN (values)</code>
     */
    public List<de.mig.mdr.dal.jooq.tables.pojos.Element> fetchByScopedIdentifierId(Integer... values) {
        return fetch(Element.ELEMENT.SCOPED_IDENTIFIER_ID, values);
    }

    /**
     * Fetch records that have <code>code BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<de.mig.mdr.dal.jooq.tables.pojos.Element> fetchRangeOfCode(String lowerInclusive, String upperInclusive) {
        return fetchRange(Element.ELEMENT.CODE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>code IN (values)</code>
     */
    public List<de.mig.mdr.dal.jooq.tables.pojos.Element> fetchByCode(String... values) {
        return fetch(Element.ELEMENT.CODE, values);
    }

    /**
     * Fetch records that have <code>is_valid BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<de.mig.mdr.dal.jooq.tables.pojos.Element> fetchRangeOfIsValid(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(Element.ELEMENT.IS_VALID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>is_valid IN (values)</code>
     */
    public List<de.mig.mdr.dal.jooq.tables.pojos.Element> fetchByIsValid(Boolean... values) {
        return fetch(Element.ELEMENT.IS_VALID, values);
    }

    /**
     * Fetch records that have <code>format BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<de.mig.mdr.dal.jooq.tables.pojos.Element> fetchRangeOfFormat(String lowerInclusive, String upperInclusive) {
        return fetchRange(Element.ELEMENT.FORMAT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>format IN (values)</code>
     */
    public List<de.mig.mdr.dal.jooq.tables.pojos.Element> fetchByFormat(String... values) {
        return fetch(Element.ELEMENT.FORMAT, values);
    }

    /**
     * Fetch records that have <code>datatype BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<de.mig.mdr.dal.jooq.tables.pojos.Element> fetchRangeOfDatatype(String lowerInclusive, String upperInclusive) {
        return fetchRange(Element.ELEMENT.DATATYPE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>datatype IN (values)</code>
     */
    public List<de.mig.mdr.dal.jooq.tables.pojos.Element> fetchByDatatype(String... values) {
        return fetch(Element.ELEMENT.DATATYPE, values);
    }

    /**
     * Fetch records that have <code>unit_of_measure BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<de.mig.mdr.dal.jooq.tables.pojos.Element> fetchRangeOfUnitOfMeasure(String lowerInclusive, String upperInclusive) {
        return fetchRange(Element.ELEMENT.UNIT_OF_MEASURE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>unit_of_measure IN (values)</code>
     */
    public List<de.mig.mdr.dal.jooq.tables.pojos.Element> fetchByUnitOfMeasure(String... values) {
        return fetch(Element.ELEMENT.UNIT_OF_MEASURE, values);
    }

    /**
     * Fetch records that have <code>maximum_characters BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<de.mig.mdr.dal.jooq.tables.pojos.Element> fetchRangeOfMaximumCharacters(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Element.ELEMENT.MAXIMUM_CHARACTERS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>maximum_characters IN (values)</code>
     */
    public List<de.mig.mdr.dal.jooq.tables.pojos.Element> fetchByMaximumCharacters(Integer... values) {
        return fetch(Element.ELEMENT.MAXIMUM_CHARACTERS, values);
    }

    /**
     * Fetch records that have <code>description BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<de.mig.mdr.dal.jooq.tables.pojos.Element> fetchRangeOfDescription(String lowerInclusive, String upperInclusive) {
        return fetchRange(Element.ELEMENT.DESCRIPTION, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>description IN (values)</code>
     */
    public List<de.mig.mdr.dal.jooq.tables.pojos.Element> fetchByDescription(String... values) {
        return fetch(Element.ELEMENT.DESCRIPTION, values);
    }

    /**
     * Fetch records that have <code>validation_type BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<de.mig.mdr.dal.jooq.tables.pojos.Element> fetchRangeOfValidationType(ValidationType lowerInclusive, ValidationType upperInclusive) {
        return fetchRange(Element.ELEMENT.VALIDATION_TYPE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>validation_type IN (values)</code>
     */
    public List<de.mig.mdr.dal.jooq.tables.pojos.Element> fetchByValidationType(ValidationType... values) {
        return fetch(Element.ELEMENT.VALIDATION_TYPE, values);
    }

    /**
     * Fetch records that have <code>validation_data BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<de.mig.mdr.dal.jooq.tables.pojos.Element> fetchRangeOfValidationData(String lowerInclusive, String upperInclusive) {
        return fetchRange(Element.ELEMENT.VALIDATION_DATA, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>validation_data IN (values)</code>
     */
    public List<de.mig.mdr.dal.jooq.tables.pojos.Element> fetchByValidationData(String... values) {
        return fetch(Element.ELEMENT.VALIDATION_DATA, values);
    }

    /**
     * Fetch records that have <code>permitted_value BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<de.mig.mdr.dal.jooq.tables.pojos.Element> fetchRangeOfPermittedValue(String lowerInclusive, String upperInclusive) {
        return fetchRange(Element.ELEMENT.PERMITTED_VALUE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>permitted_value IN (values)</code>
     */
    public List<de.mig.mdr.dal.jooq.tables.pojos.Element> fetchByPermittedValue(String... values) {
        return fetch(Element.ELEMENT.PERMITTED_VALUE, values);
    }

    /**
     * Fetch records that have <code>data BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<de.mig.mdr.dal.jooq.tables.pojos.Element> fetchRangeOfData(JSON lowerInclusive, JSON upperInclusive) {
        return fetchRange(Element.ELEMENT.DATA, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>data IN (values)</code>
     */
    public List<de.mig.mdr.dal.jooq.tables.pojos.Element> fetchByData(JSON... values) {
        return fetch(Element.ELEMENT.DATA, values);
    }

    /**
     * Fetch records that have <code>uuid BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<de.mig.mdr.dal.jooq.tables.pojos.Element> fetchRangeOfUuid(UUID lowerInclusive, UUID upperInclusive) {
        return fetchRange(Element.ELEMENT.UUID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>uuid IN (values)</code>
     */
    public List<de.mig.mdr.dal.jooq.tables.pojos.Element> fetchByUuid(UUID... values) {
        return fetch(Element.ELEMENT.UUID, values);
    }

    /**
     * Fetch records that have <code>external_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<de.mig.mdr.dal.jooq.tables.pojos.Element> fetchRangeOfExternalId(String lowerInclusive, String upperInclusive) {
        return fetchRange(Element.ELEMENT.EXTERNAL_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>external_id IN (values)</code>
     */
    public List<de.mig.mdr.dal.jooq.tables.pojos.Element> fetchByExternalId(String... values) {
        return fetch(Element.ELEMENT.EXTERNAL_ID, values);
    }
}
