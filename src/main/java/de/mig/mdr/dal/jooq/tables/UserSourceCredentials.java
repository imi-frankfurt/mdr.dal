/*
 * This file is generated by jOOQ.
 */
package de.mig.mdr.dal.jooq.tables;


import de.mig.mdr.dal.jooq.Keys;
import de.mig.mdr.dal.jooq.Public;
import de.mig.mdr.dal.jooq.tables.records.UserSourceCredentialsRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.13.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserSourceCredentials extends TableImpl<UserSourceCredentialsRecord> {

    private static final long serialVersionUID = 439032720;

    /**
     * The reference instance of <code>public.user_source_credentials</code>
     */
    public static final UserSourceCredentials USER_SOURCE_CREDENTIALS = new UserSourceCredentials();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserSourceCredentialsRecord> getRecordType() {
        return UserSourceCredentialsRecord.class;
    }

    /**
     * The column <code>public.user_source_credentials.user_id</code>.
     */
    public final TableField<UserSourceCredentialsRecord, Integer> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.user_source_credentials.credential</code>.
     */
    public final TableField<UserSourceCredentialsRecord, String> CREDENTIAL = createField(DSL.name("credential"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.user_source_credentials.source_id</code>.
     */
    public final TableField<UserSourceCredentialsRecord, Integer> SOURCE_ID = createField(DSL.name("source_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>public.user_source_credentials</code> table reference
     */
    public UserSourceCredentials() {
        this(DSL.name("user_source_credentials"), null);
    }

    /**
     * Create an aliased <code>public.user_source_credentials</code> table reference
     */
    public UserSourceCredentials(String alias) {
        this(DSL.name(alias), USER_SOURCE_CREDENTIALS);
    }

    /**
     * Create an aliased <code>public.user_source_credentials</code> table reference
     */
    public UserSourceCredentials(Name alias) {
        this(alias, USER_SOURCE_CREDENTIALS);
    }

    private UserSourceCredentials(Name alias, Table<UserSourceCredentialsRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserSourceCredentials(Name alias, Table<UserSourceCredentialsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> UserSourceCredentials(Table<O> child, ForeignKey<O, UserSourceCredentialsRecord> key) {
        super(child, key, USER_SOURCE_CREDENTIALS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public UniqueKey<UserSourceCredentialsRecord> getPrimaryKey() {
        return Keys.USER_SOURCE_CREDENTIALS_PKEY;
    }

    @Override
    public List<UniqueKey<UserSourceCredentialsRecord>> getKeys() {
        return Arrays.<UniqueKey<UserSourceCredentialsRecord>>asList(Keys.USER_SOURCE_CREDENTIALS_PKEY, Keys.CREDENTIALS_UNIQUE);
    }

    @Override
    public List<ForeignKey<UserSourceCredentialsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<UserSourceCredentialsRecord, ?>>asList(Keys.USER_SOURCE_CREDENTIALS__USER_ID_FKEY, Keys.USER_SOURCE_CREDENTIALS__SOURCE_ID_FKEY);
    }

    public MdrUser mdrUser() {
        return new MdrUser(this, Keys.USER_SOURCE_CREDENTIALS__USER_ID_FKEY);
    }

    public Source source() {
        return new Source(this, Keys.USER_SOURCE_CREDENTIALS__SOURCE_ID_FKEY);
    }

    @Override
    public UserSourceCredentials as(String alias) {
        return new UserSourceCredentials(DSL.name(alias), this);
    }

    @Override
    public UserSourceCredentials as(Name alias) {
        return new UserSourceCredentials(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserSourceCredentials rename(String name) {
        return new UserSourceCredentials(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserSourceCredentials rename(Name name) {
        return new UserSourceCredentials(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
