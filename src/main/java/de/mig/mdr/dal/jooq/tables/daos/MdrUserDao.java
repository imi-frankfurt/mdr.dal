/*
 * This file is generated by jOOQ.
 */
package de.mig.mdr.dal.jooq.tables.daos;


import de.mig.mdr.dal.jooq.tables.MdrUser;
import de.mig.mdr.dal.jooq.tables.records.MdrUserRecord;

import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.13.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MdrUserDao extends DAOImpl<MdrUserRecord, de.mig.mdr.dal.jooq.tables.pojos.MdrUser, Integer> {

    /**
     * Create a new MdrUserDao without any configuration
     */
    public MdrUserDao() {
        super(MdrUser.MDR_USER, de.mig.mdr.dal.jooq.tables.pojos.MdrUser.class);
    }

    /**
     * Create a new MdrUserDao with an attached configuration
     */
    public MdrUserDao(Configuration configuration) {
        super(MdrUser.MDR_USER, de.mig.mdr.dal.jooq.tables.pojos.MdrUser.class, configuration);
    }

    @Override
    public Integer getId(de.mig.mdr.dal.jooq.tables.pojos.MdrUser object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<de.mig.mdr.dal.jooq.tables.pojos.MdrUser> fetchRangeOfId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(MdrUser.MDR_USER.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<de.mig.mdr.dal.jooq.tables.pojos.MdrUser> fetchById(Integer... values) {
        return fetch(MdrUser.MDR_USER.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public de.mig.mdr.dal.jooq.tables.pojos.MdrUser fetchOneById(Integer value) {
        return fetchOne(MdrUser.MDR_USER.ID, value);
    }

    /**
     * Fetch records that have <code>auth_id BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<de.mig.mdr.dal.jooq.tables.pojos.MdrUser> fetchRangeOfAuthId(String lowerInclusive, String upperInclusive) {
        return fetchRange(MdrUser.MDR_USER.AUTH_ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>auth_id IN (values)</code>
     */
    public List<de.mig.mdr.dal.jooq.tables.pojos.MdrUser> fetchByAuthId(String... values) {
        return fetch(MdrUser.MDR_USER.AUTH_ID, values);
    }

    /**
     * Fetch a unique record that has <code>auth_id = value</code>
     */
    public de.mig.mdr.dal.jooq.tables.pojos.MdrUser fetchOneByAuthId(String value) {
        return fetchOne(MdrUser.MDR_USER.AUTH_ID, value);
    }

    /**
     * Fetch records that have <code>first_name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<de.mig.mdr.dal.jooq.tables.pojos.MdrUser> fetchRangeOfFirstName(String lowerInclusive, String upperInclusive) {
        return fetchRange(MdrUser.MDR_USER.FIRST_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>first_name IN (values)</code>
     */
    public List<de.mig.mdr.dal.jooq.tables.pojos.MdrUser> fetchByFirstName(String... values) {
        return fetch(MdrUser.MDR_USER.FIRST_NAME, values);
    }

    /**
     * Fetch records that have <code>last_name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<de.mig.mdr.dal.jooq.tables.pojos.MdrUser> fetchRangeOfLastName(String lowerInclusive, String upperInclusive) {
        return fetchRange(MdrUser.MDR_USER.LAST_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>last_name IN (values)</code>
     */
    public List<de.mig.mdr.dal.jooq.tables.pojos.MdrUser> fetchByLastName(String... values) {
        return fetch(MdrUser.MDR_USER.LAST_NAME, values);
    }

    /**
     * Fetch records that have <code>user_name BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<de.mig.mdr.dal.jooq.tables.pojos.MdrUser> fetchRangeOfUserName(String lowerInclusive, String upperInclusive) {
        return fetchRange(MdrUser.MDR_USER.USER_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>user_name IN (values)</code>
     */
    public List<de.mig.mdr.dal.jooq.tables.pojos.MdrUser> fetchByUserName(String... values) {
        return fetch(MdrUser.MDR_USER.USER_NAME, values);
    }

    /**
     * Fetch records that have <code>email BETWEEN lowerInclusive AND upperInclusive</code>
     */
    public List<de.mig.mdr.dal.jooq.tables.pojos.MdrUser> fetchRangeOfEmail(String lowerInclusive, String upperInclusive) {
        return fetchRange(MdrUser.MDR_USER.EMAIL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>email IN (values)</code>
     */
    public List<de.mig.mdr.dal.jooq.tables.pojos.MdrUser> fetchByEmail(String... values) {
        return fetch(MdrUser.MDR_USER.EMAIL, values);
    }
}
