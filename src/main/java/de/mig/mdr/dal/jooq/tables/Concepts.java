/*
 * This file is generated by jOOQ.
 */
package de.mig.mdr.dal.jooq.tables;


import de.mig.mdr.dal.jooq.Keys;
import de.mig.mdr.dal.jooq.Public;
import de.mig.mdr.dal.jooq.tables.records.ConceptsRecord;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;

import javax.annotation.processing.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row8;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.13.4"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Concepts extends TableImpl<ConceptsRecord> {

    private static final long serialVersionUID = -1262371204;

    /**
     * The reference instance of <code>public.concepts</code>
     */
    public static final Concepts CONCEPTS = new Concepts();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ConceptsRecord> getRecordType() {
        return ConceptsRecord.class;
    }

    /**
     * The column <code>public.concepts.id</code>.
     */
    public final TableField<ConceptsRecord, Integer> ID = createField(DSL.name("id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).defaultValue(org.jooq.impl.DSL.field("nextval('concepts_id_seq'::regclass)", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>public.concepts.system</code>.
     */
    public final TableField<ConceptsRecord, String> SYSTEM = createField(DSL.name("system"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.concepts.version</code>.
     */
    public final TableField<ConceptsRecord, String> VERSION = createField(DSL.name("version"), org.jooq.impl.SQLDataType.CLOB.nullable(false), this, "");

    /**
     * The column <code>public.concepts.term</code>.
     */
    public final TableField<ConceptsRecord, String> TERM = createField(DSL.name("term"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.concepts.text</code>.
     */
    public final TableField<ConceptsRecord, String> TEXT = createField(DSL.name("text"), org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.concepts.source_id</code>.
     */
    public final TableField<ConceptsRecord, Integer> SOURCE_ID = createField(DSL.name("source_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.concepts.created_by</code>.
     */
    public final TableField<ConceptsRecord, Integer> CREATED_BY = createField(DSL.name("created_by"), org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.concepts.created_at</code>.
     */
    public final TableField<ConceptsRecord, LocalDateTime> CREATED_AT = createField(DSL.name("created_at"), org.jooq.impl.SQLDataType.LOCALDATETIME.nullable(false).defaultValue(org.jooq.impl.DSL.field("now()", org.jooq.impl.SQLDataType.LOCALDATETIME)), this, "");

    /**
     * Create a <code>public.concepts</code> table reference
     */
    public Concepts() {
        this(DSL.name("concepts"), null);
    }

    /**
     * Create an aliased <code>public.concepts</code> table reference
     */
    public Concepts(String alias) {
        this(DSL.name(alias), CONCEPTS);
    }

    /**
     * Create an aliased <code>public.concepts</code> table reference
     */
    public Concepts(Name alias) {
        this(alias, CONCEPTS);
    }

    private Concepts(Name alias, Table<ConceptsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Concepts(Name alias, Table<ConceptsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Concepts(Table<O> child, ForeignKey<O, ConceptsRecord> key) {
        super(child, key, CONCEPTS);
    }

    @Override
    public Schema getSchema() {
        return Public.PUBLIC;
    }

    @Override
    public Identity<ConceptsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_CONCEPTS;
    }

    @Override
    public UniqueKey<ConceptsRecord> getPrimaryKey() {
        return Keys.CONCEPTS_PKEY;
    }

    @Override
    public List<UniqueKey<ConceptsRecord>> getKeys() {
        return Arrays.<UniqueKey<ConceptsRecord>>asList(Keys.CONCEPTS_PKEY, Keys.CONCEPTS_SOURCE_ID_SYSTEM_VERSION_TERM_TEXT_KEY);
    }

    @Override
    public List<ForeignKey<ConceptsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ConceptsRecord, ?>>asList(Keys.CONCEPTS__SOURCE_ID_FKEY);
    }

    public Source source() {
        return new Source(this, Keys.CONCEPTS__SOURCE_ID_FKEY);
    }

    @Override
    public Concepts as(String alias) {
        return new Concepts(DSL.name(alias), this);
    }

    @Override
    public Concepts as(Name alias) {
        return new Concepts(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Concepts rename(String name) {
        return new Concepts(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Concepts rename(Name name) {
        return new Concepts(name, null);
    }

    // -------------------------------------------------------------------------
    // Row8 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row8<Integer, String, String, String, String, Integer, Integer, LocalDateTime> fieldsRow() {
        return (Row8) super.fieldsRow();
    }
}
